
//! Autogenerated weights for `pallet_uke`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-03, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `baders-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_uke
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// pallets/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

use crate::pallet;


pub trait WeightInfo {
	fn store_message() -> Weight;
	fn register() -> Weight;
  }

/// Weight functions for `pallet_uke`.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	// Storage: Uke Conversations (r:1 w:1)
	// Storage: Uke IsActiveConversation (r:1 w:1)
	// Storage: Uke ActiveConversations (r:1 w:1)
	fn store_message() -> Weight {
		Weight::from_parts(38_000_000_u64, 0u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Uke Usernames (r:0 w:1)
	fn register() -> Weight {
		Weight::from_parts(21_000_000_u64, 0u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

impl WeightInfo for () {
	fn store_message() -> Weight {
		Weight::from_parts(38_000_000_u64, 0u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	// Storage: Uke Usernames (r:0 w:1)
	fn register() -> Weight {
		Weight::from_parts(21_000_000_u64, 0u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
